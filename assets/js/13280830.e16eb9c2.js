"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4135],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var f=n.createContext({}),u=function(e){var t=n.useContext(f),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(f.Provider,{value:t},e.children)},d="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,f=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=u(r),c=a,m=d["".concat(f,".").concat(c)]||d[c]||s[c]||i;return r?n.createElement(m,l(l({ref:t},p),{},{components:r})):n.createElement(m,l({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,l=new Array(i);l[0]=c;var o={};for(var f in t)hasOwnProperty.call(t,f)&&(o[f]=t[f]);o.originalType=e,o[d]="string"==typeof e?e:a,l[1]=o;for(var u=2;u<i;u++)l[u]=r[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},985:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>f,contentTitle:()=>l,default:()=>s,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var n=r(7462),a=(r(7294),r(3905));const i={id:"farfield.integrated_flux"},l=void 0,o={unversionedId:"API/farfield.integrated_flux",id:"API/farfield.integrated_flux",title:"farfield.integrated_flux",description:"farfield.integrated_flux",source:"@site/docs/API/farfield.integrated_flux.md",sourceDirName:"API",slug:"/API/farfield.integrated_flux",permalink:"/fmmax/API/farfield.integrated_flux",draft:!1,editUrl:"https://github.com/facebookresearch/fmmax/docs/API/farfield.integrated_flux.md",tags:[],version:"current",frontMatter:{id:"farfield.integrated_flux"},sidebar:"APISidebar",previous:{title:"farfield.farfield_profile",permalink:"/fmmax/API/farfield.farfield_profile"},next:{title:"farfield.solid_angle_from_unflattened_transverse_wavevectors",permalink:"/fmmax/API/farfield.solid_angle_from_unflattened_transverse_wavevectors"}},f={},u=[{value:"<code>farfield.integrated_flux</code>",id:"farfieldintegrated_flux",level:3},{value:"Args:",id:"args",level:4},{value:"Returns:",id:"returns",level:4}],p={toc:u},d="wrapper";function s(e){let{components:t,...r}=e;return(0,a.kt)(d,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"farfieldintegrated_flux"},(0,a.kt)("inlineCode",{parentName:"h3"},"farfield.integrated_flux")),(0,a.kt)("p",null,"Computes the flux within the bounds defined by ",(0,a.kt)("inlineCode",{parentName:"p"},"angle_bounds_fn"),"."),(0,a.kt)("h4",{id:"args"},"Args:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"flux"),": The flux array, with shape ",(0,a.kt)("inlineCode",{parentName:"li"},"(..., num_bz_kx, num_bz_ky, ...\n2 * num_terms, num_sources)"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"wavelength"),": The wavelength, batch-compatible with ",(0,a.kt)("inlineCode",{parentName:"li"},"flux"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"in_plane_wavevector"),": The in-plane wavevector for the zeroth Fourier\norder, batch-compatible with ",(0,a.kt)("inlineCode",{parentName:"li"},"flux"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"primitive_lattice_vectors"),": The primitive lattice vectors of the unit cell."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"expansion"),": The expansion used for the fields."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"brillouin_grid_axes"),": Specifies the two axes of ",(0,a.kt)("inlineCode",{parentName:"li"},"flux")," corresponding to\nthe Brillouin zone grid."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"angle_bounds_fn"),": A function with signature ",(0,a.kt)("inlineCode",{parentName:"li"},"fn(polar_angle, azimuthal_angle)"),"\nreturning a mask that is ",(0,a.kt)("inlineCode",{parentName:"li"},"True")," for angles that should be included in\nthe integral."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"upsample_factor"),": Integer factor specifying upsampling performed in the\nintegral, which is used to approximate trapezoidal rule integration.")),(0,a.kt)("h4",{id:"returns"},"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"None"),": The integrated flux, with shape equal to the batch dimensions of flux,\nexcluding those for the brillouin zone grid.")))}s.isMDXComponent=!0}}]);