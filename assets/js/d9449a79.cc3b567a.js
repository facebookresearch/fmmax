"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1104],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var i=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,i)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,i,n=function(e,t){if(null==e)return{};var r,i,n={},o=Object.keys(e);for(i=0;i<o.length;i++)r=o[i],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)r=o[i],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var m=i.createContext({}),s=function(e){var t=i.useContext(m),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},p=function(e){var t=s(e.components);return i.createElement(m.Provider,{value:t},e.children)},c="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,m=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=s(r),u=n,d=c["".concat(m,".").concat(u)]||c[u]||f[u]||o;return r?i.createElement(d,a(a({ref:t},p),{},{components:r})):i.createElement(d,a({ref:t},p))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,a=new Array(o);a[0]=u;var l={};for(var m in t)hasOwnProperty.call(t,m)&&(l[m]=t[m]);l.originalType=e,l[c]="string"==typeof e?e:n,a[1]=l;for(var s=2;s<o;s++)a[s]=r[s];return i.createElement.apply(null,a)}return i.createElement.apply(null,r)}u.displayName="MDXCreateElement"},4739:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>m,contentTitle:()=>a,default:()=>f,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var i=r(7462),n=(r(7294),r(3905));const o={id:"fmm.eigensolve_isotropic_media"},a=void 0,l={unversionedId:"API/fmm.eigensolve_isotropic_media",id:"API/fmm.eigensolve_isotropic_media",title:"fmm.eigensolve_isotropic_media",description:"fmm.eigensolveisotropicmedia",source:"@site/docs/API/fmm.eigensolve_isotropic_media.md",sourceDirName:"API",slug:"/API/fmm.eigensolve_isotropic_media",permalink:"/fmmax/API/fmm.eigensolve_isotropic_media",draft:!1,editUrl:"https://github.com/facebookresearch/fmmax/docs/API/fmm.eigensolve_isotropic_media.md",tags:[],version:"current",frontMatter:{id:"fmm.eigensolve_isotropic_media"},sidebar:"APISidebar",previous:{title:"fmm.eigensolve_general_anisotropic_media",permalink:"/fmmax/API/fmm.eigensolve_general_anisotropic_media"},next:{title:"fmm.fourier_matrices_patterned_anisotropic_media",permalink:"/fmmax/API/fmm.fourier_matrices_patterned_anisotropic_media"}},m={},s=[{value:"<code>fmm.eigensolve_isotropic_media</code>",id:"fmmeigensolve_isotropic_media",level:3},{value:"Args:",id:"args",level:4},{value:"Returns:",id:"returns",level:4}],p={toc:s},c="wrapper";function f(e){let{components:t,...r}=e;return(0,n.kt)(c,(0,i.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h3",{id:"fmmeigensolve_isotropic_media"},(0,n.kt)("inlineCode",{parentName:"h3"},"fmm.eigensolve_isotropic_media")),(0,n.kt)("p",null,"Performs the eigensolve for a layer with isotropic permittivity."),(0,n.kt)("p",null,"This function performs either a uniform-layer or patterned-layer eigensolve,\ndepending on the shape of the trailing dimensions of a given layer permittivity.\nWhen the final two dimensions have shape ",(0,n.kt)("inlineCode",{parentName:"p"},"(1, 1)"),", the layer is treated as\nuniform. Otherwise, it is patterned."),(0,n.kt)("h4",{id:"args"},"Args:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"wavelength"),": The free space wavelength of the excitation."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"in_plane_wavevector"),": ",(0,n.kt)("inlineCode",{parentName:"li"},"(kx0, ky0)"),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"primitive_lattice_vectors"),": The primitive vectors for the real-space lattice."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"permittivity"),": The permittivity array."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"expansion"),": The field expansion to be used."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"formulation"),": Specifies the formulation to be used.")),(0,n.kt)("h4",{id:"returns"},"Returns:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"None"),": The ",(0,n.kt)("inlineCode",{parentName:"li"},"LayerSolveResult"),".")))}f.isMDXComponent=!0}}]);