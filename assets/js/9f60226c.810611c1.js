"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7669],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},f="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),f=d(n),u=i,m=f["".concat(s,".").concat(u)]||f[u]||p[u]||a;return n?r.createElement(m,o(o({ref:t},c),{},{components:n})):r.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[f]="string"==typeof e?e:i,o[1]=l;for(var d=2;d<a;d++)o[d]=n[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3857:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var r=n(7462),i=(n(7294),n(3905));const a={id:"fields.fields_on_coordinates"},o=void 0,l={unversionedId:"API/fields.fields_on_coordinates",id:"API/fields.fields_on_coordinates",title:"fields.fields_on_coordinates",description:"fields.fieldsoncoordinates",source:"@site/docs/API/fields.fields_on_coordinates.md",sourceDirName:"API",slug:"/API/fields.fields_on_coordinates",permalink:"/fmmax/API/fields.fields_on_coordinates",draft:!1,editUrl:"https://github.com/facebookresearch/fmmax/docs/API/fields.fields_on_coordinates.md",tags:[],version:"current",frontMatter:{id:"fields.fields_on_coordinates"},sidebar:"APISidebar",previous:{title:"fields.fields_from_wave_amplitudes",permalink:"/fmmax/API/fields.fields_from_wave_amplitudes"},next:{title:"fields.fields_on_grid",permalink:"/fmmax/API/fields.fields_on_grid"}},s={},d=[{value:"<code>fields.fields_on_coordinates</code>",id:"fieldsfields_on_coordinates",level:3},{value:"Args:",id:"args",level:4},{value:"Returns:",id:"returns",level:4}],c={toc:d},f="wrapper";function p(e){let{components:t,...n}=e;return(0,i.kt)(f,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h3",{id:"fieldsfields_on_coordinates"},(0,i.kt)("inlineCode",{parentName:"h3"},"fields.fields_on_coordinates")),(0,i.kt)("p",null,"Computes the fields at specified coordinates."),(0,i.kt)("p",null,"The calculation is for a batch of fields, with the batch axis being the\nfinal axis. There can also be leading batch axes. Accordingly, fields\nshould have shape ",(0,i.kt)("inlineCode",{parentName:"p"},"(..., 2 * num_terms, num_amplitudes)"),". The trailing batch\ndimension is preferred because it allows matrix-matrix multiplication instead\nof batched matrix-vector multiplication."),(0,i.kt)("h4",{id:"args"},"Args:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"electric_field"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"(ex, ey, ez)")," electric field Fourier amplitudes."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"magnetic_field"),": ",(0,i.kt)("inlineCode",{parentName:"li"},"(hx, hy, hz)")," magnetic field Fourier amplitudes."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"layer_solve_result"),": The results of the layer eigensolve."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"x"),": The x-coordinates where the fields are sought."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"y"),": The y-coordinates where the fields are sought, with shape matching\nthat of ",(0,i.kt)("inlineCode",{parentName:"li"},"x"),".")),(0,i.kt)("h4",{id:"returns"},"Returns:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"None"),": The electric field ",(0,i.kt)("inlineCode",{parentName:"li"},"(ex, ey, ez)"),", magnetic field ",(0,i.kt)("inlineCode",{parentName:"li"},"(hx, hy, hz)"),",\nand the grid coordinates ",(0,i.kt)("inlineCode",{parentName:"li"},"(x, y)"),". The field arrays each have shape\n",(0,i.kt)("inlineCode",{parentName:"li"},"batch_shape + coordinates_shape + (num_amplitudes)"),".")))}p.isMDXComponent=!0}}]);