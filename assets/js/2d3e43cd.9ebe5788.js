"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2801],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var o=n.createContext({}),l=function(e){var t=n.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(o.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),m=l(r),f=a,d=m["".concat(o,".").concat(f)]||m[f]||u[f]||i;return r?n.createElement(d,s(s({ref:t},p),{},{components:r})):n.createElement(d,s({ref:t},p))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,s=new Array(i);s[0]=f;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c[m]="string"==typeof e?e:a,s[1]=c;for(var l=2;l<i;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},530:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var n=r(7462),a=(r(7294),r(3905));const i={id:"scattering.stack_s_matrices_interior"},s=void 0,c={unversionedId:"API/scattering.stack_s_matrices_interior",id:"API/scattering.stack_s_matrices_interior",title:"scattering.stack_s_matrices_interior",description:"scattering.stacksmatrices_interior",source:"@site/docs/API/scattering.stack_s_matrices_interior.md",sourceDirName:"API",slug:"/API/scattering.stack_s_matrices_interior",permalink:"/fmmax/API/scattering.stack_s_matrices_interior",draft:!1,editUrl:"https://github.com/facebookresearch/fmmax/docs/API/scattering.stack_s_matrices_interior.md",tags:[],version:"current",frontMatter:{id:"scattering.stack_s_matrices_interior"},sidebar:"APISidebar",previous:{title:"scattering.set_start_layer_thickness",permalink:"/fmmax/API/scattering.set_start_layer_thickness"},next:{title:"scattering.stack_s_matrix",permalink:"/fmmax/API/scattering.stack_s_matrix"}},o={},l=[{value:"<code>scattering.stack_s_matrices_interior</code>",id:"scatteringstack_s_matrices_interior",level:3},{value:"Args:",id:"args",level:4},{value:"Returns:",id:"returns",level:4}],p={toc:l},m="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(m,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"scatteringstack_s_matrices_interior"},(0,a.kt)("inlineCode",{parentName:"h3"},"scattering.stack_s_matrices_interior")),(0,a.kt)("p",null,"Computes scattering matrices before and after each layer in the stack."),(0,a.kt)("p",null,"Specifically, for each layer ",(0,a.kt)("inlineCode",{parentName:"p"},"i")," two ",(0,a.kt)("inlineCode",{parentName:"p"},"ScatteringMatrix")," are returned. The\nfirst relates fields in the substack ",(0,a.kt)("inlineCode",{parentName:"p"},"0, ..., i"),", while the second relates\nthe fields in the substack ",(0,a.kt)("inlineCode",{parentName:"p"},"i, ..., N"),", where ",(0,a.kt)("inlineCode",{parentName:"p"},"N"),' is the maximum layer\nindex. These two scattering matrices are denoted as the corresponding\nto the "before" substack and the "after" substack.'),(0,a.kt)("h4",{id:"args"},"Args:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"layer_solve_results"),": The eigensolve results for layers in the stack."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"layer_thicknesses"),": The thicknesses for layers in the stack.")),(0,a.kt)("h4",{id:"returns"},"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"None"),": The tuple of ",(0,a.kt)("inlineCode",{parentName:"li"},"(scattering_matrix_before, scattering_matrix_after)"),".")))}u.isMDXComponent=!0}}]);